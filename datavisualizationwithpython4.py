# -*- coding: utf-8 -*-
""">DataVisualizationWithPython4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10r6NDps8Kjz1GN6e4pnnTvpf6_Kj6jYz

# > **Data Visualization with Python (Part 4)**

In this notebook, I will use **plotly.graph_objects** and **plotly.express** for creating plots.

My dataset contains information on approximately 200 million domestic US flights reported to the United States Bureau of Transportation Statistics. The dataset contains basic information about each flight (such as date, time, departure airport, arrival airport) and, if applicable, the amount of time the flight was delayed and information about the reason for the delay. This dataset can be used to predict the likelihood of a flight arriving on time. The data is hosted on Data Asset eXchange and its format is .csv.





I've uploaded the dataset to Google Drive.

Let's get started!
"""

!pip install -q -U watermark

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext watermark
# %watermark -v -p pandas,plotly

!pip install plotly-express

#import os
#import numpy as np
import pandas as pd
#from tqdm import tqdm
#import seaborn as sns
#from pylab import rcParams
#%matplotlib inline 
#import matplotlib as mpl
#import matplotlib.pyplot as plt
#from matplotlib import rc
#from scipy import stats
#import matplotlib.patches as mpatches
#from PIL import Image
#import folium
#import io
#import json
import plotly.express as px
import plotly.graph_objects as go

from google.colab import drive
drive.mount('/content/gdrive')

!ls '/content/gdrive'

AirlineData = pd.read_csv('/content/gdrive/MyDrive/AirlineData.csv',encoding = "ISO-8859-1")
AirlineData.head(2)

AirlineData.shape

# Randomly sample 600 data points. I Setg the random state to be 42 so that I get same result.
data = AirlineData.sample(n=600, random_state=42)

data.shape

"""- I'm going to apply ***'plotly.graph_objects'*** to discover How departure time changes with respect to airport distance. Let's draw a ***Scatter Plot*** in this section.

*Just a Note:* With px.scatter, each data point is represented as a marker point, whose location is given by the x and y columns.
"""

# First I will create a figure using go.Figure and adding trace to it through go.scatter
fig = go.Figure(data=go.Scatter(x=data['Distance'], y=data['DepTime'], mode='markers', marker=dict(color='green')))
# Updating layout through `update_layout`. Here we are adding title to the plot and providing title to x and y axis.
fig.update_layout(title='Distance vs Departure Time', xaxis_title='Distance', yaxis_title='DepTime')

fig.show()

"""Now, I also want to apply 'plotly.graph_objects' to extract average monthly arrival delay time and see how it changes over the year. ***Line Plot*** will be used.

*Just a Note:* With px.line, each data point is represented as a vertex (which location is given by the x and y columns) of a polyline mark in 2D space.
"""

# Group the data by Month and compute average over arrival delay time.
line_data = data.groupby('Month')['ArrDelay'].mean().reset_index()

# Display the data
line_data

#I want to create a line plot with x-axis being the month and y-axis being computed average delay time.



#fig = go.Figure(data=go.Scatter(x=line_data['Month'], y=line_data['ArrDelay'], mode='lines', marker=dict(color='navy')))
fig = go.Figure(data=go.Scatter(x=line_data['Month'], y=line_data['ArrDelay']))
fig.update_layout(title='Month vs Average Flight Delay Time', xaxis_title='Month', yaxis_title='ArrDelay')
fig.show()

"""I will use ***'plotly.express'*** to extract the number of flights from a specific airline that goes to a destination. ***Bar Chart*** will be plotted. """

# Group the data by destination state and reporting airline. Compute total number of flights in each combination
bar_data = data.groupby(['DestState'])['Flights'].sum().reset_index()

bar_data

# Use plotly express bar chart function px.bar. Provide input data, x and y axis variable, and title of the chart.
# This will give total number of flights to the destination state.
fig = px.bar(bar_data, x="DestState", y="Flights", title='Total number of flights to the destination state split by reporting Airline') 

fig.show()

"""I want to use **'plotly.express'** to get the number of flights as per reporting airline. I will plot **Bubble Chart**. """

# Group the data by reporting airline and get number of flights
bub_data = data.groupby('Reporting_Airline')['Flights'].sum().reset_index()

bub_data

fig = px.scatter(bub_data, x="Reporting_Airline", y="Flights", size="Flights",
                 hover_name="Reporting_Airline", title='Reporting Airline vs Number of Flights', size_max=50)
fig.show()

"""I will use **'plotly.express'** to get the distribution of arrival delay, and plot **Histogram**.



"""

# Set missing values to 0
data['ArrDelay'] = data['ArrDelay'].fillna(0)

# Create histogram here
#fig = px.histogram(data, x="ArrDelay")
#fig.show()

fig = px.histogram(data, x="ArrDelay",
                   title='Histogram of arrival delay',
                   labels={'ArrDelay':'ArrDelay'}, # can specify one label per df column
                   opacity=0.8,
                   log_y=True, # represent bars with log scale
                   color_discrete_sequence=['navy'] # color of histogram bars
                   )
fig.show()

"""I want to use **'plotly.express'** to get the proportion of distance group by month (month indicated by numbers), and plot **Pie Chart**. 

"""

# Values parameter will set values associated to the sector. 'Month' feature is passed to it.
# labels for the sector are passed to the `names` parameter.

fig = px.pie(data, values='Month', names='DistanceGroup', color='DistanceGroup',
             color_discrete_map={'1':'lightcyan',
                                 '2':'cyan',
                                 '3':'royalblue',
                                 '4':'darkblue',
                                 '5': 'green',
                                 '6': 'yellow',
                                 '7': 'pink',
                                 '8': 'red',
                                 '9': 'navy',
                                 '10': 'orange',
                                 '11': 'brown'
                                 })

fig.show()

"""I am going to apply **'plotly.express'** to demonstrate a hierarchical view in the order of month and destination state holding the value of the number of flights, and plot **Sunburst Charts**."""

fig = px.sunburst(data, path=['Month', 'DestStateName'], values='Flights')
fig.show()